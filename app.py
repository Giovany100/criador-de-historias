import streamlit as st
import os
import tempfile # Adicionado para lidar com arquivos tempor√°rios
import zipfile # Adicionado para funcionalidade de ZIP
import io # Adicionado para manipula√ß√£o de bytes em mem√≥ria

# Importar a fun√ß√£o refatorada do main.py
# Certifique-se de que main.py esteja na mesma pasta ou no PYTHONPATH
try:
    from main import iniciar_processamento_em_lote
    # Tentar importar a constante PASTA_SAIDA_PRINCIPAL aqui tamb√©m, se existir globalmente em main
    # Se n√£o, usaremos um valor padr√£o definido abaixo.
    from main import PASTA_SAIDA_PRINCIPAL as MAIN_PASTA_SAIDA_PRINCIPAL 
except ImportError:
    # Se a importa√ß√£o de iniciar_processamento_em_lote falhar, o app para.
    # Se apenas PASTA_SAIDA_PRINCIPAL falhar, usamos o default.
    MAIN_PASTA_SAIDA_PRINCIPAL = "resultados_processamento"
    # Se iniciar_processamento_em_lote n√£o puder ser importado, o app deve parar.
    # Isso ser√° tratado no primeiro bloco try-except.
    if 'iniciar_processamento_em_lote' not in globals():
        st.error("Erro cr√≠tico ao importar 'iniciar_processamento_em_lote' de main.py. O app n√£o pode continuar.")
        st.stop()

# Definir a constante localmente em app.py para garantir disponibilidade
# Usar o valor importado se bem-sucedido, sen√£o o default.
APP_PASTA_SAIDA_PRINCIPAL = MAIN_PASTA_SAIDA_PRINCIPAL if 'MAIN_PASTA_SAIDA_PRINCIPAL' in locals() else "resultados_processamento"

# Criar a pasta de sa√≠da principal se ela n√£o existir no ambiente do Streamlit Cloud
# Isso √© importante porque o main.py tamb√©m tenta cri√°-la, mas √© bom garantir.
if not os.path.exists(APP_PASTA_SAIDA_PRINCIPAL):
    try:
        os.makedirs(APP_PASTA_SAIDA_PRINCIPAL)
    except OSError as e:
        st.error(f"N√£o foi poss√≠vel criar a pasta de sa√≠da principal '{APP_PASTA_SAIDA_PRINCIPAL}' no ambiente do Streamlit: {e}")
        # N√£o necessariamente parar, pois main.py pode tentar novamente, mas √© um aviso.

st.set_page_config(
    page_title="Criador de Hist√≥rias IA", 
    page_icon="ü§ñ", 
    layout="wide", # Usar layout wide para mais espa√ßo
    initial_sidebar_state="expanded" # Manter sidebar aberta por padr√£o
)

# --- Barra Lateral (Sidebar) para Entradas ---
st.sidebar.header("‚öôÔ∏è Configura√ß√µes de Entrada")

# Alterado de text_input para file_uploader
arquivos_resumo_carregados = st.sidebar.file_uploader(
    "Carregue os arquivos de resumo (.txt):",
    type=["txt"],
    accept_multiple_files=True,  # Permitir m√∫ltiplos arquivos
    key="resumos_uploader",
    help="Selecione um ou mais arquivos de texto (.txt) contendo os resumos."
)

st.sidebar.subheader("üó£Ô∏è Idiomas para Tradu√ß√£o")
# Mapeamento de c√≥digos de idioma para nomes amig√°veis
mapa_nomes_idiomas_interface = {
    "italiano": "Italiano", "ingles": "Ingl√™s", "espanhol": "Espanhol",
    "polones": "Polon√™s", "romeno": "Romeno", "alemao": "Alem√£o",
    "frances": "Franc√™s", "hungaro": "H√∫ngaro", "grego": "Grego",
    "croata": "Croata", "espanhol_mx": "Espanhol (M√©xico)", "suica": "Su√≠√ßo (Alem√£o)",
}

idiomas_disponiveis = list(mapa_nomes_idiomas_interface.keys())
idiomas_selecionados_map = {}

# Criar colunas para os checkboxes para melhor organiza√ß√£o se houver muitos idiomas
num_colunas = 2 # Ajuste conforme necess√°rio
colunas_idiomas = st.sidebar.columns(num_colunas)

for i, cod_idioma in enumerate(idiomas_disponiveis):
    col = colunas_idiomas[i % num_colunas]
    idiomas_selecionados_map[cod_idioma] = col.checkbox(mapa_nomes_idiomas_interface[cod_idioma], key=f"chk_{cod_idioma}")

# Coletar os idiomas selecionados para passar para a fun√ß√£o de processamento
idiomas_para_processar_lista = [cod for cod, selecionado in idiomas_selecionados_map.items() if selecionado]
idiomas_str_para_funcao = ",".join(idiomas_para_processar_lista)

btn_iniciar_processamento = st.sidebar.button(
    "üöÄ Iniciar Processamento", 
    type="primary", 
    use_container_width=True, 
    key="btn_iniciar"
)
st.sidebar.markdown("---_---")
st.sidebar.caption(f"Version 1.2 | Pasta de Sa√≠da Relativa: {APP_PASTA_SAIDA_PRINCIPAL}")

# --- P√°gina Principal ---
st.title("üåü Criador de Hist√≥rias e Imagens com IA üé¨")
st.markdown("Bem-vindo ao seu assistente para transformar resumos em roteiros completos, traduzidos e com sugest√µes de imagens!")
st.markdown("Configure as entradas na barra lateral √† esquerda e clique em **Iniciar Processamento**.")

st.divider()

# L√≥gica de processamento (quando o bot√£o √© clicado)
if btn_iniciar_processamento:
    if not arquivos_resumo_carregados: 
        st.warning("Por favor, carregue pelo menos um arquivo de resumo (.txt) na barra lateral.", icon="‚ö†Ô∏è")
    else:
        log_area = st.empty()
        log_area.info("Iniciando o processamento... Por favor, aguarde.", icon="‚è≥")
        
        with tempfile.TemporaryDirectory(prefix="resumos_streamlit_") as temp_dir_resumos:
            for uploaded_file in arquivos_resumo_carregados:
                try:
                    temp_file_path = os.path.join(temp_dir_resumos, uploaded_file.name)
                    with open(temp_file_path, "wb") as f:
                        f.write(uploaded_file.getbuffer())
                except Exception as e_save:
                    st.error(f"Erro ao salvar o arquivo carregado '{uploaded_file.name}': {e_save}")
                    st.stop() 

            with st.spinner('ü§ñ Processando resumos, gerando hist√≥rias, traduzindo e criando imagens... Isso pode levar um bom tempo!'):
                try:
                    sucesso = iniciar_processamento_em_lote(temp_dir_resumos, idiomas_str_para_funcao)
                    
                    log_area.empty() 
                    if sucesso:
                        st.success(f"Processamento conclu√≠do com sucesso! üéâ Preparando arquivos para download...", icon="‚úÖ")
                        st.balloons()

                        # Criar arquivo ZIP em mem√≥ria
                        zip_buffer = io.BytesIO()
                        with zipfile.ZipFile(zip_buffer, "a", zipfile.ZIP_DEFLATED, False) as zip_file:
                            for root, _, files in os.walk(temp_dir_resumos):
                                for file in files:
                                    file_path = os.path.join(root, file)
                                    # Adicionar arquivo ao ZIP, mantendo a estrutura de pastas relativa a temp_dir_resumos
                                    zip_file.write(file_path, os.path.relpath(file_path, temp_dir_resumos))
                        
                        zip_buffer.seek(0)
                        
                        st.download_button(
                            label="üì• Baixar Resultados (.zip)",
                            data=zip_buffer,
                            file_name="resultados_criador_historias.zip",
                            mime="application/zip",
                            use_container_width=True
                        )
                        st.info("Clique no bot√£o acima para baixar todos os arquivos de entrada e sa√≠da processados.")

                    else:
                        st.error("O processamento encontrou um problema ou foi interrompido. Verifique os logs do aplicativo no Streamlit Cloud para mais detalhes.", icon="üö®")
                
                except ImportError as e_import: 
                     st.error(f"Falha cr√≠tica: {e_import}. O m√≥dulo 'main' ou suas depend√™ncias n√£o puderam ser importados corretamente no in√≠cio.")
                     st.exception(e_import)
                except Exception as e_process:
                    log_area.empty()
                    st.error(f"Ocorreu um erro inesperado durante o processamento: {e_process}", icon="üî•")
                    st.exception(e_process) 
else:
    st.markdown("### Como usar:")
    st.markdown("1. Carregue um ou mais arquivos de resumo (.txt) na **barra lateral √† esquerda**.")
    st.markdown("2. Selecione os idiomas para tradu√ß√£o (opcional).")
    st.markdown("3. Clique em `Iniciar Processamento`.")
    st.markdown("4. Acompanhe o progresso e aguarde a mensagem de finaliza√ß√£o aqui. Os logs detalhados podem ser visualizados no console do Streamlit Cloud.")