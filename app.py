import streamlit as st
import os
from pyngrok import ngrok

# Importar a fun√ß√£o refatorada do main.py
# Certifique-se de que main.py esteja na mesma pasta ou no PYTHONPATH
try:
    from main import iniciar_processamento_em_lote
    # Tentar importar a constante PASTA_SAIDA_PRINCIPAL aqui tamb√©m, se existir globalmente em main
    # Se n√£o, usaremos um valor padr√£o definido abaixo.
    from main import PASTA_SAIDA_PRINCIPAL as MAIN_PASTA_SAIDA_PRINCIPAL 
except ImportError:
    # Se a importa√ß√£o de iniciar_processamento_em_lote falhar, o app para.
    # Se apenas PASTA_SAIDA_PRINCIPAL falhar, usamos o default.
    MAIN_PASTA_SAIDA_PRINCIPAL = "resultados_processamento"
    # Se iniciar_processamento_em_lote n√£o puder ser importado, o app deve parar.
    # Isso ser√° tratado no primeiro bloco try-except.
    if 'iniciar_processamento_em_lote' not in globals():
        st.error("Erro cr√≠tico ao importar 'iniciar_processamento_em_lote' de main.py. O app n√£o pode continuar.")
        st.stop()

# Definir a constante localmente em app.py para garantir disponibilidade
# Usar o valor importado se bem-sucedido, sen√£o o default.
APP_PASTA_SAIDA_PRINCIPAL = MAIN_PASTA_SAIDA_PRINCIPAL if 'MAIN_PASTA_SAIDA_PRINCIPAL' in locals() else "resultados_processamento"

st.set_page_config(
    page_title="Criador de Hist√≥rias IA", 
    page_icon="ü§ñ", 
    layout="wide", # Usar layout wide para mais espa√ßo
    initial_sidebar_state="expanded" # Manter sidebar aberta por padr√£o
)

# --- Barra Lateral (Sidebar) para Entradas ---
st.sidebar.header("‚öôÔ∏è Configura√ß√µes de Entrada")
pasta_resumos = st.sidebar.text_input(
    "Pasta com os arquivos de resumo (.txt):", 
    key="pasta_resumos_input",
    help="Forne√ßa o caminho completo para a pasta. Ex: C:/Users/SeuUsuario/Resumos"
)

st.sidebar.subheader("üó£Ô∏è Idiomas para Tradu√ß√£o")
# Mapeamento de c√≥digos de idioma para nomes amig√°veis
mapa_nomes_idiomas_interface = {
    "italiano": "Italiano", "ingles": "Ingl√™s", "espanhol": "Espanhol",
    "polones": "Polon√™s", "romeno": "Romeno", "alemao": "Alem√£o",
    "frances": "Franc√™s", "hungaro": "H√∫ngaro", "grego": "Grego",
    "croata": "Croata", "espanhol_mx": "Espanhol (M√©xico)", "suica": "Su√≠√ßo (Alem√£o)",
}

idiomas_disponiveis = list(mapa_nomes_idiomas_interface.keys())
idiomas_selecionados_map = {}

# Criar colunas para os checkboxes para melhor organiza√ß√£o se houver muitos idiomas
num_colunas = 2 # Ajuste conforme necess√°rio
colunas_idiomas = st.sidebar.columns(num_colunas)

for i, cod_idioma in enumerate(idiomas_disponiveis):
    col = colunas_idiomas[i % num_colunas]
    idiomas_selecionados_map[cod_idioma] = col.checkbox(mapa_nomes_idiomas_interface[cod_idioma], key=f"chk_{cod_idioma}")

# Coletar os idiomas selecionados para passar para a fun√ß√£o de processamento
idiomas_para_processar_lista = [cod for cod, selecionado in idiomas_selecionados_map.items() if selecionado]
idiomas_str_para_funcao = ",".join(idiomas_para_processar_lista)

btn_iniciar_processamento = st.sidebar.button(
    "üöÄ Iniciar Processamento", 
    type="primary", 
    use_container_width=True, 
    key="btn_iniciar"
)
st.sidebar.markdown("---_---")
st.sidebar.caption(f"Version 1.2 | Pasta de Sa√≠da: {APP_PASTA_SAIDA_PRINCIPAL}")

# --- P√°gina Principal ---
st.title("üåü Criador de Hist√≥rias e Imagens com IA üé¨")
st.markdown("Bem-vindo ao seu assistente para transformar resumos em roteiros completos, traduzidos e com sugest√µes de imagens!")
st.markdown("Configure as entradas na barra lateral √† esquerda e clique em **Iniciar Processamento**.")

st.info("‚ÑπÔ∏è **Nota:** Os logs detalhados do processo aparecer√£o no console (terminal) onde o Streamlit foi iniciado.", icon="üì¢")
st.divider()

# L√≥gica de processamento (quando o bot√£o √© clicado)
if btn_iniciar_processamento:
    if not pasta_resumos:
        st.warning("Por favor, forne√ßa o caminho para a pasta de resumos na barra lateral.", icon="‚ö†Ô∏è")
    elif not os.path.isdir(pasta_resumos):
        st.error(f"O caminho da pasta de resumos fornecido n√£o √© v√°lido ou n√£o existe: {pasta_resumos}", icon="‚ùå")
    else:
        # Placeholder para o log na interface (ser√° aprimorado depois)
        log_area = st.empty()
        log_area.info("Iniciando o processamento... Por favor, aguarde.", icon="‚è≥")
        
        with st.spinner('ü§ñ Processando resumos, gerando hist√≥rias, traduzindo e criando imagens... Isso pode levar um bom tempo!'):
            try:
                # Chamar a fun√ß√£o principal do main.py
                # Idealmente, a fun√ß√£o iniciar_processamento_em_lote seria modificada para aceitar um callback 
                # para atualizar a interface Streamlit com os logs.
                # Por enquanto, os logs principais ainda ir√£o para o console.
                
                sucesso = iniciar_processamento_em_lote(pasta_resumos, idiomas_str_para_funcao)
                
                log_area.empty() # Limpar a mensagem de "Iniciando..."
                if sucesso:
                    st.success(f"Processamento conclu√≠do com sucesso! üéâ Verifique a pasta de resultados (normalmente em '{APP_PASTA_SAIDA_PRINCIPAL}') e o console para logs detalhados.", icon="‚úÖ")
                    st.balloons()
                else:
                    st.error("O processamento encontrou um problema ou foi interrompido. Verifique os logs no console.", icon="üö®")
            except ImportError:
                 st.error("Falha ao executar o processamento. O m√≥dulo 'main' n√£o p√¥de ser importado corretamente no in√≠cio.")                 
            except Exception as e:
                log_area.empty()
                st.error(f"Ocorreu um erro inesperado durante o processamento: {e}", icon="üî•")
                st.exception(e) # Mostra o traceback completo na interface para depura√ß√£o
else:
    st.markdown("### Como usar:")
    st.markdown("1. Preencha os campos na **barra lateral √† esquerda**.")
    st.markdown("2. Clique em `Iniciar Processamento`.")
    st.markdown("3. Acompanhe o progresso no console e aguarde a mensagem de finaliza√ß√£o aqui.")

# Configura√ß√£o do ngrok (adicione no in√≠cio do arquivo)
def iniciar_tunnel():
    try:
        public_url = ngrok.connect(8501)
        st.sidebar.success(f'Acesse este app em: {public_url}')
    except Exception as e:
        st.sidebar.error('Erro ao criar t√∫nel ngrok. Verifique sua conex√£o com a internet.')

if __name__ == "__main__":
    import streamlit.web.cli as stcli
    import sys
    
    # Iniciar o t√∫nel ngrok
    iniciar_tunnel()
    
    sys.argv = ["streamlit", "run", "app.py", "--server.address", "0.0.0.0", "--server.port", "8501"]
    sys.exit(stcli.main()) 